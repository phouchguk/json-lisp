(set string-esc "#")
(set comma-at (+ string-esc "@"))

(set delims (obj "'" "quote"
                 "`" "bquote"
                 "," "comma"
                 comma-at "comma-at"))

(set strings [])

(def push (a x)
  (. a 'push x)
  a)

(def range (start end xs)
  (if (> start end)
      xs
      (do
        (push xs start)
        (range (+ start 1) end xs))))

(def rest (xs)
  (slice xs 1))

(def map-loop (f xs i res)
  (if (empty xs)
      res
      (map-loop f (rest xs) (+ i 1) (concat res (arr (f (0 xs) i))))))

(def map (f xs)
  (map-loop f xs 0 []))

(def filter-loop (f xs res)
  (if (empty xs)
      res
      (filter-loop f (rest xs) (if (f (0 xs))
                                (concat res (arr (0 xs)))
                                res))))

(def filter (f xs)
  (filter-loop f xs []))

(def extract-strings (x i)
  (if (id 0 (% i 2))
      x
      (do
        (push strings x)
        (+ string-esc (/ (- i 1) 2)))))

(def rm-comment (line _)
  (0 (split ";" line)))

(def cons (x xs)
  (concat (arr x) xs))

(def replace (x y str)
  (. str 'replace (new RegExp x "g") y))

(def split (x str)
  (. str 'split x))

(def join (x xs)
  (. xs 'join x))

(def trim (s _)
  (. s 'trim))

(def log (x)
  (. console 'log x)
  x)

(def inc (x _)
  (+ x 1))

(log (map inc [1 2 3]))

(log (replace "\[" "(" "[hello]"))

(log (join "-" (split " " "one two three")))

(set code "(arr 1 2 3 \"he\\"llo\" [1 2 3] {a 1 b 2}) ; silly example")

(log (push [1 2] 3))

(def thread (x xs)
  (if (empty xs)
      x
      (thread (push (0 xs) x) (rest xs))))

(mac -> args
  (thread (0 args) (rest args)))

(log (-> code
         (replace "\\\"" string-esc)
         (split "\"")
         (map extract-strings)
         (join "")
         (split newline)
         (map rm-comment)
         (join newline)
         (replace "\[" "[quote [")
         (replace "\]" "]]")
         (replace "\(" "[")
         (replace "\(" "]")
         (replace ",@" comma-at)
         (replace "\[" " [ ")
         (replace "\]" " ] ")
         (replace "\{" " { ")
         (replace "\}" " } ")
         (replace "'" " ' ")
         (replace "`" " ` ")
         (replace "," " , ")
         (split " ")
         (map trim)
         (filter (fn (x) (not (id x ""))))
         ))

(log strings)
(err "oops")