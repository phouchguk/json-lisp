(def log (x)
  (. console 'log x)
  x)

(set a 42)
;; does log return its arg?
(log (+ (log a) 1))

(set b 99)
(set c a)
;; lookup works in set
(log c)

;; if works
(log
 (? 0 b c))

;; do works
(log
 (do a b c))

(log
 (do 100))

;; primitive call
(log
 (+ b c))

(def add (x y)
  (+ 1 2)
  (+ x y))

;; compound call
(log
 (add 3 4))

(set a1 [1 2 3])
(log a1)

;; number as fn
(log
 (0 a1))
(0 a1 10)

;; array as fn
(log
 ([97 98 99] 1))

;; array assignment
(a1 2 100)
(log a1)

(set dict {a 1 b 2})

;; symbol dict lookup
(log
 ('b dict))

;; dict assignment
('b dict 22)

(set z 'b)

(log
 (dict z))

(dict 'b 2)

(log
 ('b dict))

;; test delete
(delete dict 'b)
(log dict)

(def first (x)
  (0 x))

(def rest (x)
  (slice x 1))

(def copy (x)
  (slice x 0))

(log
 (first a1))

(log
 (rest a1))

(log
 (empty a1))

;; test fns
(log
 (not (id (length (copy a1)) 2)))

(log
 (type null))

;; simple macro test
(mac double (x)
  (arr 'add x x))

(log
 (double 3))

(log
 (concat [1 2 3] [4 5 6]))

;; let
(log (let x 9 (+ x 2)))

;; more if
(log (if))

(log (if (+ 1 2)))

(log
 (if false b
     false 999
     (+ a 100)))

(log "hello")

;; js interop
(log (. "hello" 'toUpperCase))
(log (length "hello"))

(log (. "[[[hello]]]" 'replace (new RegExp "\[" "g") "("))

;; rest args
(log ((fn (x . y) y) 1 2 3))

(log (array []))

(log (uvar))
(log (uvar))

(log (and (log 1) false (log (/ 1 0)) 3))

;; bquote
(log `(+ ,@(arr a a)))

(log (or false 2 3))

;; same key/val shorthand test
(log {:a :b})

(def stringify (x)
  (. JSON 'stringify x))

(def parse (json)
  (. JSON 'parse json))

(log (parse "[1, 2, 3]"))

(log (stringify [1 2 3]))

;; eval
(log (eval (arr '+ 1 2)))

;; destructuring
(def destruct-test1 ({:a :b})
  (log (arr a b)))

(def destruct-test2 ({a c :b})
  (log (arr c b)))

(def destruct-test3 ({:a b [c d {:e}]})
  (log (arr a c d e)))

(destruct-test1 {a 42 b 99})

(destruct-test2 {c 42 b 99})

(destruct-test3 {a 1 b [2 3 {e 4}]})

(destruct-test1 (obj 'a 42 'b 99))
