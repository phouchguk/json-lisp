(def log (x)
  (. console 'log x)
  x)

(set a 42)
(log (+ (log a) 1))

(set b 99)
(set c a)
(log c)

(log
 (? 0 b c))

(log
 (do a b c))

(log
 (do 100))

(log
 (+ b c))

(def add (x y)
  (+ 1 2)
  (+ x y))

(log
 (add 3 4))

(set a1 [1 2 3])
(log a1)
(log
 (0 a1))
(0 a1 10)
(a1 2 100)
(log a1)

(log
 ([97 98 99] 1))

(set dict {a 1 b 2})
(log
 ('b dict))

('b dict 22)

(set z 'b)

(log
 (dict z))

(dict 'b 2)

(log
 ('b dict))

(delete dict 'b)
(log dict)

(def length (x)
  (. x '-length))

(def first (x)
  (0 x))

(def rest (x)
  (slice x 1))

(def copy (x)
  (slice x 0))

(def empty (x)
  (id (length x) 0))

(def not (x)
  (id x false))

(log
 (first a1))

(log
 (rest a1))

(log
 (empty a1))

(log
 (not (id (length (copy a1)) 2)))

(log
 (type null))

(mac double (x)
  (arr 'add x x))

(log
 (double 3))

(log
 (concat [1 2 3] [4 5 6]))

(log (let x 9 (+ x 2)))

(log (if))

(log (if (+ 1 2)))

(log
 (if false b
     false 999
     (+ a 100)))

(log "hello")

(log (. "hello" 'toUpperCase))
(log (length "hello"))

(log (. "[[[hello]]]" 'replace (new RegExp "\[" "g") "("))

(log ((fn (x . y) y) 1 2 3))

(log (array []))

(log (uvar))
(log (uvar))

(log (and (log 1) false (log (/ 1 0)) 3))

(log `(+ ,@(arr a a)))

(log (or false 2 3))

(log {:a :b})

(log (load "test_file.txt"))

(dump "junk.txt" "Text in junk.")
