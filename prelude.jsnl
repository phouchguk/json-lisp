(set *uvarn* -1)

(set concat
  (fn (a1 a2)
    (. a1 'concat a2)))

(set slice
  (fn (xs i)
    (. xs 'slice i)))

(set mac
  (macro (name args . body)
    (arr 'set name (concat (arr 'macro args) body))))

(mac def (name args . body)
  (arr 'set name (concat (arr 'fn args) body)))

(mac if args
  (? (empty args)
     false
     (? (id (length args) 1)
        (0 args)
        (arr '? (0 args) (1 args) (concat (arr 'if) (slice args 2))))))

(mac and args
  (? (id (length args) 1)
     (0 args)
     (arr '? (0 args)
          (concat (arr 'and) (slice args 1))
          false)))

(def array (x)
  (id (type x) "array"))

(def atom (x)
  (not (array x)))

(def bqex (x)
  (if (empty x)
        (arr 'quote x)
      (atom x)
        (arr 'quote x)
      (id (0 x) 'comma)
        (1 x)
      (and (array (0 x)) (id (0 (0 x)) 'comma-at))
        (arr 'concat (1 (0 x)) (bqex (slice x 1)))
        (arr 'concat (arr 'arr (bqex (0 x))) (bqex (slice x 1)))))

(mac bquote (x)
  (bqex x))

(mac let (parm val . body)
  `((fn (,parm) ,@body) ,val))

(def uvar ()
  (set *uvarn* (+ *uvarn* 1))
  (+ "_g" *uvarn*))

(mac or args
  (? (empty args)
     false
     (let v (uvar)
       `(let ,v ,(0 args)
          (? ,v ,v (or ,@(slice args 1)))))))
